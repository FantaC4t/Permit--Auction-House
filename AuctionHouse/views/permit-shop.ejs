<!DOCTYPE html>
<html lang="en">
<head>
    <title>Permit Shop</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/styles.css">
    <style>
        .alert {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px;
            border-radius: 5px;
            font-weight: bold;
            display: none;
            z-index: 1000;
        }
        .alert.success { background-color: #4CAF50; color: white; }
        .alert.error { background-color: #f44336; color: white; }
        .modal { display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); border-radius: 10px; z-index: 1001; }
        .modal-content { text-align: center; }
        .modal-header { font-weight: bold; margin-bottom: 10px; }
        .modal-close { cursor: pointer; color: red; font-weight: bold; }
        .modal-close:hover { color: darkred; }
        .overlay { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 1000; }
    </style>
</head>
<body>
    <nav>
        <div><a href="/">Shop</a></div>
        <div><a href="/logout">Logout</a></div>
    </nav>

    <div class="container">
        <h1>Welcome to the Permit Shop, <%= user.username || user.userId %>!</h1>
        <div id="alert-box" class="alert"></div>
        
        <h2>Your Coins: <span id="user-coins"><%= user.coins %></span></h2>

        <div class="invites">
            <h2>Team Invites</h2>
            <% if (invites.length > 0) { %>
                <% invites.forEach(invite => { %>
                    <div class="invite">
                        <div class="invite-message">
                            <strong><%= invite.inviter %></strong> invited you to bid on <strong><%= invite.permit %></strong>.
                            You need <strong><%= invite.bid_amount %></strong> coins to join.
                        </div>
                        <div class="invite-buttons">
                            <button onclick="respondInvite(<%= invite._id %>, 'accept')">Accept</button>
                            <button onclick="respondInvite(<%= invite._id %>, 'reject')">Reject</button>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <p>No invites yet.</p>
            <% } %>
        </div>

        <table>
            <thead>
                <tr>
                    <th>Permit Name</th>
                    <th>Description</th>
                    <th>Highest Bid</th>
                    <th>Your Bid</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <% permits.forEach(permit => { %>
                <tr id="permit-<%= permit._id %>">
                    <td><%= permit.name %></td>
                    <td><%= permit.description %></td>
                    <td class="highest-bid">
                        <a href="#" onclick="showBidHistory('<%= permit._id %>')"><%= permit.highest_bid || "No bids yet" %></a>
                    </td>
                    <td><%= userBids[permit._id] || "No bid placed" %></td>
                    <td>
                        <input type="number" id="bid-<%= permit._id %>" placeholder="Enter bid" required min="0">
                        <button onclick="placeBid('<%= permit._id %>')">Bid</button>
                        <input type="text" id="invite-user-<%= permit._id %>" placeholder="Username">
                        <button onclick="sendInvite('<%= permit._id %>')">Invite</button>
                    </td>
                </tr>
                <% }); %>
            </tbody>
        </table>
    </div>

    <div id="bidHistoryModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                Bid History
                <span class="modal-close" onclick="closeBidHistoryModal()">Ã—</span>
            </div>
            <div id="bidHistoryContent"></div>
        </div>
    </div>
    <div id="overlay" class="overlay" onclick="closeBidHistoryModal()"></div>

    <script>
        function placeBid(permitId) {
            const bidAmount = parseFloat(document.getElementById(`bid-${permitId}`).value);
            const highestBidElement = document.querySelector(`#permit-${permitId} .highest-bid a`);
            const highestBid = highestBidElement && highestBidElement.textContent !== "No bids yet" ? parseFloat(highestBidElement.textContent) : 0;
            const userCoinsElement = document.getElementById('user-coins');
            const userCoins = parseFloat(userCoinsElement.textContent);

            if (!bidAmount || isNaN(bidAmount) || bidAmount <= 0) {
                showAlert("Please enter a valid bid amount!", "error");
                return;
            }

            if (bidAmount <= highestBid) {
                showAlert("Your bid must be higher than the current highest bid!", "error");
                return;
            }

            if (bidAmount > userCoins) {
                showAlert("You do not have enough coins to place this bid!", "error");
                return;
            }

            fetch(`/bid/${permitId}`, {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: `bid_amount=${bidAmount}`
            }).then(response => {
                if (response.ok) {
                    response.json().then(data => {
                        showAlert("Bid placed successfully!", "success");
                        // Update the highest bid in the DOM
                        highestBidElement.textContent = data.highestBid;
                        // Update the user's coins in the DOM
                        userCoinsElement.textContent = data.updatedCoins;
                        // Update the user's bid in the DOM
                        document.querySelector(`#permit-${permitId} td:nth-child(4)`).textContent = bidAmount;
                    });
                } else {
                    response.text().then(text => showAlert(text, "error"));
                }
            }).catch(error => {
                showAlert("An error occurred while placing the bid.", "error");
            });
        }

        function respondInvite(inviteId, action) {
            fetch(`/${action}_invite/${inviteId}`, { method: "POST" })
                .then(() => location.reload());
        }

        function showAlert(message, type) {
            const alertBox = document.getElementById("alert-box");
            alertBox.textContent = message;
            alertBox.className = `alert ${type}`;
            alertBox.style.display = "block";
            setTimeout(() => { alertBox.style.display = "none"; }, 5000); // Increased duration to 5000 milliseconds (5 seconds)
        }

        document.addEventListener("DOMContentLoaded", () => {
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get("error")) showAlert(urlParams.get("error"), "error");
            if (urlParams.get("success")) showAlert(urlParams.get("success"), "success");
            history.replaceState(null, "", window.location.pathname);

            // Check for outbid notifications
            <% if (outbidNotifications && outbidNotifications.length > 0) { %>
                <% outbidNotifications.forEach(notification => { %>
                    showAlert(`You were outbid on <%= notification.permitName %> with a bid of <%= notification.bidAmount %> coins.`, "error");
                <% }); %>
            <% } %>
        });

        function showBidHistory(permitId) {
            fetch(`/permit/${permitId}/bids`)
                .then(response => response.json())
                .then(data => {
                    const bidHistoryContent = document.getElementById("bidHistoryContent");
                    bidHistoryContent.innerHTML = data.bids.map(bid => `
                        <div class="bid">
                            <p>Bidder: ${bid.bidder.username}</p>
                            <p>Amount: ${bid.amount}</p>
                            <p>Time: ${new Date(bid.bidTime).toLocaleString()}</p>
                        </div>
                    `).join('');
                    document.getElementById("bidHistoryModal").style.display = "block";
                    document.getElementById("overlay").style.display = "block";
                });
        }

        function closeBidHistoryModal() {
            document.getElementById("bidHistoryModal").style.display = "none";
            document.getElementById("overlay").style.display = "none";
        }

        let currentPermitId = null;
        function openInviteModal(permitId) {
            const username = document.getElementById(`invite-user-${permitId}`).value;
            const bidAmount = document.getElementById(`bid-${permitId}`).value;
            if (!username || !bidAmount || isNaN(bidAmount) || bidAmount <= 0) {
                showAlert("Please enter a valid username and bid before inviting.", "error");
                return;
            }
            currentPermitId = permitId;
            document.getElementById("inviteDetails").innerHTML = `Inviting <b>${username}</b> to bid on <b>${permits[permitId].name}</b>. Total Cost: <b>${bidAmount * 2} coins</b>`;
            document.getElementById("inviteModal").style.display = "block";
        }
        function closeInviteModal() { document.getElementById("inviteModal").style.display = "none"; }
        function sendInvite(permitId) {
            const username = document.getElementById(`invite-user-${permitId}`).value;
            fetch(`/invite/${permitId}`, {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: `invitedUser=${username}`
            }).then(() => { closeInviteModal(); location.reload(); });
        }
    </script>
</body>
</html>

